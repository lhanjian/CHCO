/*
ID: lhjay11
LANG: C
PROG: transform
*/
#include <stdio.h>
#include <string.h>

int
main(void)
{
    FILE *fin = fopen("transform.in", "r");
    FILE *fout = fopen("transform.out", "w");

    char pattern[2][101];//i have solved a "out bound of the array"
    int i = 0, j = 0;
    int x = 0, y = 0;
    int div;
    int stat = 1;

    fscanf(fin, "%d", &div);
//read pattern
    for (i = 0; i < (div); i++)
        fscanf(fin, "%s", &(pattern[0][i*div]));
    for (j = 0; j < (div*div); j++)
        fscanf(fin, "%s", &(pattern[1][j*div]));
//#1
    for (x = 0, stat = 1; x < div; x++) {
        for (y = 0; y < div; y++) {
            if ( *(*(pattern+0)+(y + x*div)) != 
                   *(*(pattern+1)+(div-1)-x + y*div) )  {
                stat = 0;
                break;
            }
        }
        if (stat == 0)
            break;
    }
    if (stat == 1) {
        fprintf(fout, "1\n");
        return 0;
    }  
//#2
    for (x = 0, stat = 1; x < (div*div); x++) {
        if (*(*(pattern + 0) + x) != 
                *(*(pattern + 1) + (div*div) - x - 1)) {
            stat = 0;
            break;
        }
    }
    if (stat == 1) {
        fprintf(fout, "2\n");
        return 0;
    }
//#3
    for (x = 0, stat = 0; x < div; x++) {
        for (y = 0; y < div; y++) {
            if ( *(*(pattern + 0) + y + div*x) != 
                    *(*(pattern + 1) + y + div*(div-1 - x)) ) {
                stat = 0;
                break;
            }
        }
        break;
    }
    if (stat == 1) {
        fprintf(fout, "3\n");
        return 0;
    }
//#4
    for (x = 0, stat = 1; x < div; x++) {
        for (y = 0; y < div; y++) {
            if (*(*(pattern + 0) + y + div*x) 
                != *(*(pattern + 1) + (div-1)-y + div*x)) {
                stat = 0;
                break;
            }
        }
        if (stat == 0)
            break;
    }
    if (stat == 1) {
        fprintf(fout, "4\n"); 
        return 0;
    }
//#5
    for (x = 0, stat = 1; x < div; x++) {
        for (y = 0; y < div; y++) {
            if ( *(*(pattern + 0) + y + (div)*x) !=
                    *(*(pattern + 1) + (div-1)-x + (div)*(div-1-y)) ) { 
                stat = 0;
                break;
            }
        }
        if (stat == 0)
            break;
    }
    if (stat == 1) {
        fprintf(fout, "5\n");
        return 0;
    }
//#6
    for (x = 0, stat = 1; x < div; x++) {
        for (y = 0; y < div; y++) {
            if (*(*(pattern + 0) + y + div*x) != 
                    *(*(pattern + 1) + y + div*(div-1-x))) {
                stat = 0;
                break;
            }
        }
        if (stat == 0) {
            break;
        }
    }
    if (stat == 1) {
        rewind(fout);
        fprintf(fout, "5\n");
        return 0;
    }
//#7
    for (x = 0, stat = 1; x < div; x++) {
        for (y = 0; y < div; y++) {
            if (*(*(pattern + 0) + y + div*x) !=
                    *(*(pattern + 1) + x + div*y)) {
                stat = 0;
                break;
            }
        }
        if (stat == 0)
            break;
    }
    if (stat == 1) {
        fprintf(fout, "5\n");
        return 0;
    }
//#8
    for (x = 0, stat = 0; x < div; x++) {
        for (y = 0; y < div; y++) {
            if (*(*(pattern + 0) + y + div*x) !=
                    *(*(pattern + 0) + y + div*x)) {
                stat = 0;
                break;
            }
        }
        if (stat == 0)
            break;
    }
    if (stat == 1) {
        fprintf(fout, "6\n");
        return 0;
    } 
    fprintf(fout, "7\n");
    return 0;
}


